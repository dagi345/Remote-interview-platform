# Convex Database Setup and Implementation Guide

## Environment Setup

### 1. Convex Account Setup
1. Go to [Convex Dashboard](https://dashboard.convex.dev)
2. Sign up or log in (GitHub authentication recommended)
3. Create a new project
4. Select your deployment location (e.g., us-east-1, eu-west-1)

### 2. Required Deployment Information
From your Convex dashboard, collect:
```
┌─ Dashboard -> Project Settings
├── Deployment URL (starts with https://...)
└── Deployment Name (e.g., "proud-elephant-123")
```

### 3. Environment Variables Setup

Create a `.env.local` file in your project root:
```env
# Convex Configuration
NEXT_PUBLIC_CONVEX_URL=your_deployment_url_here    # Required: The deployment URL from Convex dashboard
CONVEX_DEPLOYMENT=your_deployment_name_here        # Optional: Your deployment name for CLI usage
CONVEX_ADMIN_KEY=your_admin_key_here              # Optional: Admin key for backend services

# Development Configuration
NODE_ENV=development                              # Optional: Environment mode
```

### 4. Environment Type Definitions
Create or update your `env.d.ts` file:
```typescript
declare namespace NodeJS {
  interface ProcessEnv {
    NEXT_PUBLIC_CONVEX_URL: string;
    CONVEX_DEPLOYMENT?: string;
    CONVEX_ADMIN_KEY?: string;
    NODE_ENV: 'development' | 'production' | 'test';
  }
}
```

### 5. Environment File Setup

1. Add to `.gitignore`:
```gitignore
# Environment and Convex files
.env
.env.local
.env.*.local
convex/_generated/
```

2. Create `.env.example`:
```env
NEXT_PUBLIC_CONVEX_URL=
CONVEX_DEPLOYMENT=
CONVEX_ADMIN_KEY=
```

### 6. CLI Configuration
The Convex CLI will automatically use these environment variables. You can also create a `convex.json` file:

```json
{
  "project": "your-project-name",
  "team": "your-team-name",
  "prodDeployment": "prod",
  "devDeployment": "dev"
}
```

### 7. Environment Variable Usage

#### Client-Side Usage:
```typescript
const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
```

#### Server-Side Usage:
```typescript
const adminKey = process.env.CONVEX_ADMIN_KEY;
```

### 8. Validation Check

Create a validation utility (`src/lib/env.ts`):
```typescript
export function validateEnv() {
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    throw new Error('Missing NEXT_PUBLIC_CONVEX_URL');
  }

  // Validate URL format
  try {
    new URL(process.env.NEXT_PUBLIC_CONVEX_URL);
  } catch {
    throw new Error('Invalid NEXT_PUBLIC_CONVEX_URL format');
  }
}
```

### 9. Common Issues and Solutions

1. Deployment URL Issues:
   - Ensure URL starts with `https://`
   - Check for trailing slashes
   - Verify correct project selection

2. Environment Loading:
   - Run `npx convex dev` to start development server
   - Ensure `.env.local` is in project root
   - Restart development server after changes

3. Production Deployment:
   - Add variables to hosting platform
   - Use different deployments for dev/prod
   - Never commit actual URLs to repository

4. CLI Connection Issues:
   - Verify `CONVEX_DEPLOYMENT` is set
   - Check network connectivity
   - Ensure you're logged into correct team

### 10. Multiple Environments

For multiple environments, create separate files:

1. `.env.development`:
```env
NEXT_PUBLIC_CONVEX_URL=your_dev_deployment_url
CONVEX_DEPLOYMENT=dev
```

2. `.env.production`:
```env
NEXT_PUBLIC_CONVEX_URL=your_prod_deployment_url
CONVEX_DEPLOYMENT=prod
```

3. `.env.test`:
```env
NEXT_PUBLIC_CONVEX_URL=your_test_deployment_url
CONVEX_DEPLOYMENT=test
```

## Table of Contents
1. Initial Setup
2. Project Structure
3. Schema Definition
4. Basic CRUD Operations
5. Queries and Mutations
6. Real-time Data
7. Implementation Patterns
8. Common Use Cases
9. Best Practices

## 1. Initial Setup

First, install Convex in your Next.js project:

```bash
npm install convex
```

Initialize Convex in your project:
```bash
npx convex dev
```

This will create a `convex` folder in your project root with the following structure:
```
convex/
  ├── _generated/
  ├── schema.ts
  └── tsconfig.json
```

## 2. Project Structure

Recommended project structure:
```
src/
  ├── app/
  │   └── layout.tsx       # Wrap with ConvexProvider
  ├── components/
  │   └── providers/
  │       └── ConvexProvider.tsx
convex/
  ├── _generated/         # Auto-generated types
  ├── schema.ts           # Database schema
  ├── users.ts           # User-related functions
  ├── posts.ts           # Post-related functions
  └── tsconfig.json
```

## 3. Schema Definition (convex/schema.ts)

```typescript
import { defineSchema, defineTable } from "convex/schema";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    name: v.string(),
    email: v.string(),
    createdAt: v.number(),
    role: v.string(),
  }).index("by_email", ["email"]),

  posts: defineTable({
    title: v.string(),
    content: v.string(),
    authorId: v.string(),
    published: v.boolean(),
    createdAt: v.number(),
  })
  .index("by_author", ["authorId"])
  .index("by_published", ["published"]),
});
```

## 4. Basic CRUD Operations (convex/posts.ts)

```typescript
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// Create a post
export const createPost = mutation({
  args: {
    title: v.string(),
    content: v.string(),
    authorId: v.string(),
  },
  handler: async (ctx, args) => {
    return await ctx.db.insert("posts", {
      ...args,
      published: false,
      createdAt: Date.now(),
    });
  },
});

// Get all posts
export const getPosts = query({
  handler: async (ctx) => {
    return await ctx.db.query("posts").collect();
  },
});

// Get post by ID
export const getPostById = query({
  args: { id: v.id("posts") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.id);
  },
});

// Update post
export const updatePost = mutation({
  args: {
    id: v.id("posts"),
    title: v.optional(v.string()),
    content: v.optional(v.string()),
    published: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    const { id, ...updates } = args;
    return await ctx.db.patch(id, updates);
  },
});

// Delete post
export const deletePost = mutation({
  args: { id: v.id("posts") },
  handler: async (ctx, args) => {
    return await ctx.db.delete(args.id);
  },
});
```

## 5. ConvexProvider Setup (src/components/providers/ConvexProvider.tsx)

```typescript
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function ConvexClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}
```

Wrap your app in layout.tsx:
```typescript
// src/app/layout.tsx
import ConvexClientProvider from "@/components/providers/ConvexProvider";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <ConvexClientProvider>
          {children}
        </ConvexClientProvider>
      </body>
    </html>
  );
}
```

## 6. Using Convex in Components

### Basic Query Example (src/app/posts/page.tsx):
```typescript
"use client";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";

export default function PostsPage() {
  const posts = useQuery(api.posts.getPosts);

  if (!posts) return <div>Loading...</div>;

  return (
    <div>
      {posts.map((post) => (
        <div key={post._id}>
          <h2>{post.title}</h2>
          <p>{post.content}</p>
        </div>
      ))}
    </div>
  );
}
```

### Mutation Example (src/components/CreatePost.tsx):
```typescript
"use client";
import { useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";

export default function CreatePost() {
  const createPost = useMutation(api.posts.createPost);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    await createPost({
      title: formData.get("title") as string,
      content: formData.get("content") as string,
      authorId: "user123", // Replace with actual user ID
    });

    form.reset();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input name="title" placeholder="Title" required />
      <textarea name="content" placeholder="Content" required />
      <button type="submit">Create Post</button>
    </form>
  );
}
```

## 7. Implementation Patterns

### Pagination Example:
```typescript
// convex/posts.ts
export const getPaginatedPosts = query({
  args: {
    limit: v.number(),
    cursor: v.optional(v.id("posts")),
  },
  handler: async (ctx, args) => {
    const { limit, cursor } = args;
    
    let query = ctx.db.query("posts").order("desc");
    
    if (cursor) {
      query = query.filter((q) => q.lt(q.field("_id"), cursor));
    }
    
    const posts = await query.take(limit);
    const hasMore = posts.length === limit;
    
    return {
      posts,
      hasMore,
      cursor: posts[posts.length - 1]?._id,
    };
  },
});
```

### Real-time Updates Example:
```typescript
// src/components/RealtimePosts.tsx
"use client";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";

export default function RealtimePosts() {
  const posts = useQuery(api.posts.getPosts);
  // Convex automatically handles real-time updates
  
  return (
    <div>
      {posts?.map((post) => (
        <div key={post._id}>
          <h2>{post.title}</h2>
          <p>{post.content}</p>
        </div>
      ))}
    </div>
  );
}
```

## 8. Common Use Cases

### Search Implementation:
```typescript
// convex/posts.ts
export const searchPosts = query({
  args: { searchTerm: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("posts")
      .filter((q) => 
        q.or(
          q.like(q.field("title"), `%${args.searchTerm}%`),
          q.like(q.field("content"), `%${args.searchTerm}%`)
        )
      )
      .collect();
  },
});
```

### Filtering and Sorting:
```typescript
// convex/posts.ts
export const getFilteredPosts = query({
  args: {
    published: v.optional(v.boolean()),
    sortBy: v.union(v.literal("createdAt"), v.literal("title")),
    order: v.union(v.literal("asc"), v.literal("desc")),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("posts");
    
    if (args.published !== undefined) {
      query = query.filter((q) => q.eq(q.field("published"), args.published));
    }
    
    return await query.order(args.order, args.sortBy).collect();
  },
});
```

## 9. Best Practices

1. Schema Design:
   - Use appropriate value types
   - Create indexes for frequently queried fields
   - Keep schema flat when possible

2. Query Optimization:
   - Use pagination for large datasets
   - Create specific indexes for complex queries
   - Limit returned fields when possible

3. Error Handling:
```typescript
export const createPost = mutation({
  args: {
    title: v.string(),
    content: v.string(),
  },
  handler: async (ctx, args) => {
    try {
      // Validate input
      if (args.title.length < 3) {
        throw new Error("Title too short");
      }
      
      return await ctx.db.insert("posts", {
        ...args,
        createdAt: Date.now(),
      });
    } catch (error) {
      console.error("Error creating post:", error);
      throw error;
    }
  },
});
```

4. Data Validation:
```typescript
// convex/schema.ts
posts: defineTable({
  title: v.string(),
  content: v.string(),
  status: v.union(
    v.literal("draft"),
    v.literal("published"),
    v.literal("archived")
  ),
  metadata: v.object({
    views: v.number(),
    likes: v.number(),
    tags: v.array(v.string()),
  }),
});
```

## Environment Setup

1. Create `.env.local`:
```
NEXT_PUBLIC_CONVEX_URL=your_convex_deployment_url
```

2. Add to `.gitignore`:
```
.env.local
convex/_generated
```

## Common Gotchas and Solutions

1. Server Components:
   - Always use "use client" when using Convex hooks
   - Keep Convex operations in client components

2. Real-time Updates:
   - useQuery automatically handles real-time updates
   - No need for manual refresh mechanisms

3. Error Boundaries:
```typescript
"use client";
import { ErrorBoundary } from "react-error-boundary";

export default function PostsWithErrorBoundary() {
  return (
    <ErrorBoundary fallback={<div>Something went wrong</div>}>
      <Posts />
    </ErrorBoundary>
  );
}
```

Remember:
- Always run `npx convex dev` during development
- Keep schema changes small and incremental
- Use TypeScript for better type safety
- Test queries and mutations thoroughly
- Monitor Convex dashboard for performance 